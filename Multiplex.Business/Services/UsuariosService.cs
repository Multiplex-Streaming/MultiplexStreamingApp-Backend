using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using Multiplex.Domain.Models;
using System.Threading.Tasks;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Business.Enums;

namespace Multiplex.Business.Services
{
    public class UsuariosService : IUsuariosService
    {
        private readonly MultiplexContext context;
        private readonly ILogger logger;
        public UsuariosService(MultiplexContext context, ILogger<UsuariosService> logger)
        {
            this.context = context;
            this.logger = logger;
        }

        public async Task<bool> ChangePassword(ChangePasswordDTO changePasswordInfo)
        {
            var user = await context.Usuarios.Where(x => x.CorreoUsr == changePasswordInfo.Correo)
                .FirstOrDefaultAsync();
            //TODO: validar que exista el usuario 
            user.PasswordUsr = changePasswordInfo.NuevaClave;
            context.Update(user);
            await context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> CreateUserAccount(UserAccountDTO userAccount)
        {
            var tipoCuenta = await context.TiposCuentas.Where(x => userAccount.EsAbonado ? x.DescripcionTc == TiposCuentasEnum.ABONADO :
            x.DescripcionTc == TiposCuentasEnum.ADMINISTRADOR)
                .FirstOrDefaultAsync();
            // SI EXISTE UN USUARIO REGISTRADO CON EL MISMO CORREO, GENERO UN BAD REQUEST
            // NO IMPORTA SI ESTA ACTIVO O NO
            if (await context.Usuarios.Where(x => x.CorreoUsr == userAccount.Correo).AnyAsync())
                return false;

            var estadoCuenta = await context.EstadosCuentas.Where(x =>
            userAccount.EsAbonado ? x.DescripcionEc == EstadosCuentasEnum.PENDIENTE :
            x.DescripcionEc == EstadosCuentasEnum.HABILITADO)
                .FirstOrDefaultAsync();

            context.Usuarios.Add(new Usuarios()
            {
                ApellidoUsr = userAccount.Apellido,
                NombreUsr = userAccount.Nombre,
                CorreoUsr = userAccount.Correo,
                PasswordUsr = userAccount.Clave,
                //FechaAltaUsr = DateTime.Now,
                IdTc = tipoCuenta.IdTc,
                IdEc = estadoCuenta.IdEc
            });
            await context.SaveChangesAsync();
            return true;
        }

        public async Task<List<AbonadosDTO>> GetAbonadosPendientes() => await context.Usuarios
        .Where(x => x.IdEcNavigation.DescripcionEc.Equals(EstadosCuentasEnum.PENDIENTE) &&
                    x.IdTcNavigation.DescripcionTc.Equals(TiposCuentasEnum.ABONADO))
        .Select(x => new AbonadosDTO
        {
            Id = x.IdUsr,
            Name = $"{x.ApellidoUsr} {x.NombreUsr}"
        })
        .ToListAsync();

        public UserInfoDTO UserExists(string userMail, string userPass) =>
            // AGREGO PARA QUE SOLO PERMITA LOGUEAR A LOS USUARIOS HABILITADOS
            context.Usuarios.Where(x => x.CorreoUsr.Equals(userMail) && x.PasswordUsr.Equals(userPass) &&
            x.IdEcNavigation.DescripcionEc == EstadosCuentasEnum.HABILITADO)
            .Select(x => new UserInfoDTO()
            {
                Id = x.IdUsr,
                UserName = $"{x.ApellidoUsr} {x.NombreUsr}",
                IsAdmin = x.IdTcNavigation.DescripcionTc.Equals("Administrador")
            })
            .FirstOrDefault();


        public async Task<bool> UpdateAbonadoStatus(int abonadoId, string nuevoEstado)
        {
            var abonado = await context.Usuarios.Where(x => x.IdUsr == abonadoId).FirstOrDefaultAsync();
            if (abonado == null)
                return false;
            var estadoCuenta = await context.EstadosCuentas.Where(x => x.DescripcionEc == nuevoEstado).FirstOrDefaultAsync();
            if (estadoCuenta == null)
                return false;
            abonado.IdEc = estadoCuenta.IdEc;
            context.Update(abonado);
            await context.SaveChangesAsync();
            return true;
        }
    }
}
