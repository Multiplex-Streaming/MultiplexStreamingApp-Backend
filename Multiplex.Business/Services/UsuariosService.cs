using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using Multiplex.Domain.Models;
using System.Threading.Tasks;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Business.Enums;

namespace Multiplex.Business.Services
{
    public class UsuariosService : IUsuariosService
    {
        private readonly MultiplexContext context;
        private readonly ILogger logger;
        private readonly IEmailSender emailSender;
        public UsuariosService(MultiplexContext context, ILogger<UsuariosService> logger, IEmailSender emailSender)
        {
            this.context = context;
            this.logger = logger;
            this.emailSender = emailSender;
        }

        public async Task<bool> ChangePassword(ChangePasswordDTO changePasswordInfo)
        {
            var user = await context.Usuarios.Where(x => x.CorreoUsr == changePasswordInfo.Correo)
                .FirstOrDefaultAsync();
            //TODO: validar que exista el usuario 
            user.PasswordUsr = changePasswordInfo.NuevaClave;
            context.Update(user);
            await context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> CreateUserAccount(UserAccountDTO userAccount)
        {
            var tipoCuenta = await context.TiposCuentas.Where(x => userAccount.EsAbonado ? x.DescripcionTc == TiposCuentasEnum.ABONADO :
            x.DescripcionTc == TiposCuentasEnum.ADMINISTRADOR)
                .FirstOrDefaultAsync();
            // SI EXISTE UN USUARIO REGISTRADO CON EL MISMO CORREO, GENERO UN BAD REQUEST
            // NO IMPORTA SI ESTA ACTIVO O NO
            if (await context.Usuarios.Where(x => x.CorreoUsr == userAccount.Correo).AnyAsync())
                return false;

            var estadoCuenta = await context.EstadosCuentas.Where(x =>
            userAccount.EsAbonado ? x.DescripcionEc == EstadosCuentasEnum.PENDIENTE :
            x.DescripcionEc == EstadosCuentasEnum.HABILITADO)
                .FirstOrDefaultAsync();

            context.Usuarios.Add(new Usuarios()
            {
                ApellidoUsr = userAccount.Apellido,
                NombreUsr = userAccount.Nombre,
                CorreoUsr = userAccount.Correo,
                PasswordUsr = userAccount.Clave,
                FechaAltaUsr = DateTime.Now,
                IdTc = tipoCuenta.IdTc,
                IdEc = estadoCuenta.IdEc
            });

            if (await context.SaveChangesAsync() > 0)
            {
                var body = "¡Bienvenido a Multiplex! Estamos emocionados de tenerte como parte de nuestra comunidad de entusiastas del entretenimiento.\r\n\r\nEn Multiplex, creemos en brindarte la mejor experiencia de streaming posible, llena de contenido emocionante y entretenimiento de alta calidad. Queremos que aproveches al máximo tu membresía, así que aquí tienes algunos consejos para comenzar:\r\n\r\nExplora nuestro catálogo: Tenemos una amplia selección de películas, series, documentales y programas de televisión disponibles para ti. ¡Empieza a explorar y descubre tus favoritos!\r\n\r\nCrea listas personalizadas: ¿Tienes una lista de películas y programas que deseas ver? Utiliza nuestra función de listas para llevar un registro de tus selecciones y obtener recomendaciones basadas en tus gustos.\r\n\r\nDisfruta de la reproducción sin anuncios: Como miembro premium, disfrutarás de una experiencia de visualización sin interrupciones. Olvídate de los anuncios y sumérgete en el contenido que amas.\r\n\r\nDescarga para ver sin conexión: ¿Viajas o te encuentras en un lugar sin conexión a internet? Descarga tus películas y series favoritas para verlas en cualquier momento y en cualquier lugar.\r\n\r\nSoporte 24/7: Si alguna vez tienes preguntas o experimentas algún problema, nuestro equipo de soporte está disponible las 24 horas del día, los 7 días de la semana, para ayudarte. No dudes en contactarnos en cualquier momento.\r\n\r\nEstamos comprometidos a brindarte una experiencia excepcional de streaming y a seguir mejorando nuestro servicio para satisfacer tus necesidades de entretenimiento. Gracias por unirte a nosotros en esta emocionante aventura.\r\n\r\nUna vez más, bienvenido a Multiplex. ¡Esperamos que disfrutes de cada momento que pases aquí!\r\n\r\nAtentamente,\r\n\r\nEquipo de Multiplex";
                emailSender.SendEmail(userAccount.Correo, "¡Bienvenido a Multiplex!", body);
                return true;
            }

            return false;
        }

        public async Task<List<AbonadosDTO>> GetAbonadosPendientes() => await context.Usuarios
        .Where(x => x.IdEcNavigation.DescripcionEc.Equals(EstadosCuentasEnum.PENDIENTE) &&
                    x.IdTcNavigation.DescripcionTc.Equals(TiposCuentasEnum.ABONADO))
        .Select(x => new AbonadosDTO
        {
            Id = x.IdUsr,
            Name = $"{x.ApellidoUsr} {x.NombreUsr}",
            Estado = x.IdEcNavigation.DescripcionEc,
            FecAlta = x.FechaAltaUsr,
            Email = x.CorreoUsr
        })
        .ToListAsync();

        public async Task<List<AbonadosDTO>> GetAbonadosPorEstado(string estado) => await context.Usuarios
        .Where(x => x.IdEcNavigation.DescripcionEc.Equals(estado.ToUpper()) &&
                    x.IdTcNavigation.DescripcionTc.Equals(TiposCuentasEnum.ABONADO))
        .Select(x => new AbonadosDTO
        {
            Id = x.IdUsr,
            Name = $"{x.ApellidoUsr} {x.NombreUsr}",
            Estado = x.IdEcNavigation.DescripcionEc,
            FecAlta = x.FechaAltaUsr,
            Email = x.CorreoUsr
        })
        .ToListAsync();

        public UserInfoDTO UserExists(string userMail, string userPass) =>
            // AGREGO PARA QUE SOLO PERMITA LOGUEAR A LOS USUARIOS HABILITADOS
            context.Usuarios.Where(x => x.CorreoUsr.Equals(userMail) && x.PasswordUsr.Equals(userPass) &&
            x.IdEcNavigation.DescripcionEc == EstadosCuentasEnum.HABILITADO)
            .Select(x => new UserInfoDTO()
            {
                Id = x.IdUsr,
                UserName = $"{x.ApellidoUsr} {x.NombreUsr}",
                IsAdmin = x.IdTcNavigation.DescripcionTc.Equals("Administrador")
            })
            .FirstOrDefault();


        public async Task<bool> UpdateAbonadoStatus(int abonadoId, string nuevoEstado)
        {
            var abonado = await context.Usuarios.Where(x => x.IdUsr == abonadoId).FirstOrDefaultAsync();
            if (abonado == null)
                return false;
            var estadoCuenta = await context.EstadosCuentas.Where(x => x.DescripcionEc == nuevoEstado).FirstOrDefaultAsync();
            if (estadoCuenta == null)
                return false;
            abonado.IdEc = estadoCuenta.IdEc;
            context.Update(abonado);
            await context.SaveChangesAsync();
            return true;
        }
    }
}
