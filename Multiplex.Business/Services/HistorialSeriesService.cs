using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class HistorialSeriesService : IHistorialSeriesService
    {
        private readonly MultiplexContext context;

        public HistorialSeriesService(MultiplexContext context)
        {
            this.context = context;
        }

        public async Task<bool> CreateHistorialSerie(HistorialSeriesDTO historialSerie)
        {
            context.Add(new HistorialSeries()
            {
                IdSr = historialSerie.IdSr,
                IdUsr = historialSerie.IdUsr
            });
            return await context.SaveChangesAsync() > 0;
        }

        public async Task<IEnumerable<SerieDTO>> GetHistorialSeries(int idUsr)
        {
            var historialSeries = await context.HistorialSeries
                .Where(h => h.IdUsr == idUsr)
                .Select(h => new SerieDTO
                {
                    Id = h.IdSr,
                    Nombre = h.IdSrNavigation.NombreSr,
                    Portada = h.IdSrNavigation.PortadaSr,
                    Descripcion = h.IdSrNavigation.DescripcionSr,
                    Url = h.IdSrNavigation.UrlSr,
                })
                .ToListAsync();

            return historialSeries;
        }

        public async Task<SerieDTO> UpdateHistorialSerie(HistorialSeriesDTO historialSerie)
        {
            var existingHistorialSerie = await context.HistorialSeries.FindAsync(historialSerie.IdSr);
            if (existingHistorialSerie == null)
            {
                return null;
            }

            existingHistorialSerie.IdSr = historialSerie.IdSr;
            existingHistorialSerie.IdUsr = historialSerie.IdUsr;

            context.HistorialSeries.Update(existingHistorialSerie);
            await context.SaveChangesAsync();

            return new SerieDTO
            {
                Id = existingHistorialSerie.IdSr,
                Nombre = existingHistorialSerie.IdSrNavigation.NombreSr,
                Portada = existingHistorialSerie.IdSrNavigation.PortadaSr,
                Descripcion = existingHistorialSerie.IdSrNavigation.DescripcionSr,
                Url = existingHistorialSerie.IdSrNavigation.UrlSr

            }; // Devuelve el registro actualizado
        }

        public async Task<bool> DeleteHistorialSerie(HistorialSeriesDTO historialSerie)
        {
            var existingHistorialSerie = await context.HistorialSeries.FindAsync(historialSerie.IdSr);
            if (existingHistorialSerie == null)
            {
                return false;
            }

            context.HistorialSeries.Remove(existingHistorialSerie);

            return await context.SaveChangesAsync() > 0;
        }

        public async Task<IEnumerable<SerieDTO>> GetRecomendaciones(int idUsr)
        {
            // Obtén el historial de series del usuario
            var historialUsuario = await context.HistorialSeries
                .Where(h => h.IdUsr == idUsr)
                .Select(h => h.IdSr)
                .ToListAsync();

            // Encuentra otros usuarios que hayan visto las mismas series
            var usuariosSimilares = await context.HistorialSeries
                .Where(h => h.IdUsr != idUsr && historialUsuario.Contains(h.IdSr))
                .Select(h => h.IdUsr)
                .Distinct()
                .ToListAsync();

            // Recomendar series vistas por usuarios similares pero no vistas por el usuario actual
            var recomendaciones = await context.HistorialSeries
                .Where(h => usuariosSimilares.Contains(h.IdUsr) && !historialUsuario.Contains(h.IdSr))
                .Select(h => new SerieDTO
                {
                    Id = h.IdSr,
                    Nombre = h.IdSrNavigation.NombreSr,
                    Portada = h.IdSrNavigation.PortadaSr,
                    Descripcion = h.IdSrNavigation.DescripcionSr,
                    Url = h.IdSrNavigation.UrlSr
                })
                .ToListAsync();

            return recomendaciones;
        }
    }
}
