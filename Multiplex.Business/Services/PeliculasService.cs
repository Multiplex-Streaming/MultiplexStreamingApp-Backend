using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Multiplex.Business.DTOs;
using Multiplex.Business.Helpers;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class PeliculasService : IPeliculasService
    {
        private readonly MultiplexContext context;
        private readonly ILogger logger;
        private readonly IConfiguration _configuration;
        public PeliculasService(MultiplexContext context, ILogger<UsuariosService> logger, IConfiguration configuration)
        {
            this.context = context;
            this.logger = logger;
            _configuration = configuration;
        }
        public async Task<bool> CreatePelicula(PeliculaDTO pelicula)
        {
            long maxAllowedContentLength = _configuration.GetValue<long>("RequestLimits:MaxAllowedContentLength");

            if (pelicula.file.Length > maxAllowedContentLength)
                throw new Exception("El tamaño del archivo supera el límite permitido");

            var tempFileName = await ArchivosHelper.GuardarArchivo(pelicula.file);
            var tempPortadaFileName = await ArchivosHelper.GuardarArchivo(pelicula.portadaFile);

            context.Add(new Peliculas()
            {
                IdPl = pelicula.Id,
                DescripcionPl = pelicula.Descripcion,
                ElencoPl = pelicula.Elenco,
                DuracionPl = pelicula.Duracion,
                TituloPl = pelicula.Titulo,
                UrlPl = tempFileName,
                PortadaPl = tempPortadaFileName,
                GenerosPeliculas = pelicula.Generos.Select(x => new GenerosPeliculas()
                {
                    IdGn = x.Id
                }).ToHashSet()
            });
            return await context.SaveChangesAsync() > 0;
        }

        public async Task<bool> DeletePelicula(int plId)
        {
            var peliculaDb = await context.Peliculas.Include(x => x.GenerosPeliculas)
                //.Include(x => x.HistorialPeliculas)
                .Include(x => x.FavoritosPelicula)
                .Where(x => x.IdPl == plId)
                .FirstOrDefaultAsync();

            if (peliculaDb == null)
                return false;

            // Delete associated file from PeliculasTemp folder
            string tempFolderPath = Path.Combine(Path.GetTempPath(), "PeliculasTemp");
            string tempFilePath = Path.Combine(tempFolderPath, peliculaDb.UrlPl);
            if (File.Exists(tempFilePath))
            {
                File.Delete(tempFilePath);
            }

            // Remove related entities from context
            //if (peliculaDb.HistorialPeliculas.Any())
                //context.RemoveRange(peliculaDb.HistorialPeliculas);
            if (peliculaDb.GenerosPeliculas.Any())
                context.RemoveRange(peliculaDb.GenerosPeliculas);
            if (peliculaDb.FavoritosPelicula.Any())
                context.RemoveRange(peliculaDb.FavoritosPelicula);

            // Remove the movie entity itself
            context.Remove(peliculaDb);

            return await context.SaveChangesAsync() > 0;
        }

        public async Task<PeliculaDTO> GetPelicula(int plId)
        {
            return await context.Peliculas.Where(x => x.IdPl == plId)
                .Select(x => new PeliculaDTO()
                {
                    Descripcion = x.DescripcionPl,
                    Id = x.IdPl,
                    Duracion = x.DuracionPl,
                    Elenco = x.ElencoPl,
                    Generos = x.GenerosPeliculas.Select(x => new GeneroDTO()
                    {
                        Descripcion = x.IdGnNavigation.DescripcionGn,
                        Id = x.IdGn
                    }).ToList(),
                    Titulo = x.TituloPl,
                    Url = x.UrlPl,
                    Portada = x.PortadaPl
                }).FirstOrDefaultAsync();
        }

        public async Task<List<PeliculaDTO>> GetPeliculas()
        {
            return await context.Peliculas.Select(x => new PeliculaDTO()
            {
                Id = x.IdPl,
                Titulo = x.TituloPl,
                Url = x.UrlPl,
                Descripcion = x.DescripcionPl,
                Duracion = x.DuracionPl,
                Elenco = x.ElencoPl,
                Portada = x.PortadaPl,
                Generos = x.GenerosPeliculas.Select(g => new GeneroDTO()
                {
                    Descripcion = g.IdGnNavigation.DescripcionGn,
                    Id = g.IdGn
                }).ToList()
            }).ToListAsync();
        }

        public async Task<bool> UpdatePelicula(PeliculaDTO pelicula)
        {
            var peliculaDb = await context.Peliculas
                .Include(x => x.GenerosPeliculas)
                .Where(x => x.IdPl == pelicula.Id)
                .FirstOrDefaultAsync();

            if (peliculaDb == null)
                return false;

            if (pelicula.file != null)
            {
                if (await ArchivosHelper.BorrarArchivo(pelicula.Url))
                    peliculaDb.UrlPl = await ArchivosHelper.GuardarArchivo(pelicula.file);
            }

            if (pelicula.portadaFile != null)
            {
                if (await ArchivosHelper.BorrarArchivo(pelicula.Portada))
                    peliculaDb.UrlPl = await ArchivosHelper.GuardarArchivo(pelicula.portadaFile);
            }
            // Update other properties
            peliculaDb.TituloPl = pelicula.Titulo;
            peliculaDb.DescripcionPl = pelicula.Descripcion;
            peliculaDb.DuracionPl = pelicula.Duracion;
            peliculaDb.ElencoPl = pelicula.Elenco;
            peliculaDb.PortadaPl = pelicula.Portada;

            // Remove and add related genres
            if (peliculaDb.GenerosPeliculas.Any())
                context.RemoveRange(peliculaDb.GenerosPeliculas);
            peliculaDb.GenerosPeliculas = pelicula.Generos.Select(x => new GenerosPeliculas()
            {
                IdGn = x.Id
            }).ToHashSet();

            context.Update(peliculaDb);

            return await context.SaveChangesAsync() > 0;
        }

        public async Task<List<PeliculaDTO>> GetPeliculasPorGenero(int generoId) =>
            await context.GenerosPeliculas.Where(x => x.IdGn == generoId).Select(x => new PeliculaDTO
            {
                Titulo = x.IdPlNavigation.DescripcionPl
            }).ToListAsync();

        public async Task<FileStream> GetPeliculaFile(string url)
        {
            string tempFolderPath = Path.Combine(Path.GetTempPath(), "PeliculasTemp");
            string tempFilePath = Path.Combine(tempFolderPath, url);
            if (!File.Exists(tempFilePath))
                throw new Exception("No se encontró la película");

            return new FileStream(tempFilePath, FileMode.Open);
        }
    }
}
