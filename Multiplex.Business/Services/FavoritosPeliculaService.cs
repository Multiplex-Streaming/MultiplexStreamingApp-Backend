using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class FavoritosPeliculaService : IFavoritosPeliculaService
    {
        private readonly MultiplexContext context;

        public FavoritosPeliculaService(MultiplexContext context)
        {
            this.context = context;
        }

        public async Task<string> CreateFavoritosPelicula(int userId, int peliculaId )
        {
            //si el favorito ya se registro
            if (context.FavoritosPelicula.Any(h => h.IdUsr == userId && h.IdPl == peliculaId))
            {
                return "El favorito ya se encuentra registrado";
            }

            try
            {
                var favoritosPeliculaEntity = new FavoritosPelicula
                {
                    IdUsr = userId,
                    IdPl = peliculaId
                };

                context.FavoritosPelicula.Add(favoritosPeliculaEntity);
                await context.SaveChangesAsync();

                return "Favorito registrado";
            }
            catch (Exception)
            {
                return "Error al registrar el favorito";
            }
        }

        public async Task<bool> DeleteFavoritosPelicula(int userId, int peliculaId)
        {
            try
            {
                var favoritosPeliculaEntity = new FavoritosPelicula
                {
                    IdUsr = userId,
                    IdPl = peliculaId
                };

                context.FavoritosPelicula.Remove(favoritosPeliculaEntity);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task<IEnumerable<PeliculaDTO>> GetFavoritosPelicula(int idUsr)
        {
            var favoritosPelicula = await context.FavoritosPelicula
                .Where(h => h.IdUsr == idUsr)
                .Select(h => new PeliculaDTO
                {
                    Id = h.IdPl,
                    Titulo = h.IdPlNavigation.TituloPl,
                    Portada = h.IdPlNavigation.PortadaPl,
                    Descripcion = h.IdPlNavigation.DescripcionPl,
                    Url = h.IdPlNavigation.UrlPl,
                    Duracion = h.IdPlNavigation.DuracionPl
                })
                .ToListAsync();

            return favoritosPelicula;
        }
    }
}
