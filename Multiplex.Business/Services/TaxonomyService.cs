using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class TaxonomyService : ITaxonomyService
    {
        private readonly MultiplexContext context;
        private readonly ILogger logger;
        public TaxonomyService(MultiplexContext context, ILogger<UsuariosService> logger)
        {
            this.context = context;
            this.logger = logger;
        }
        public async Task<List<GeneroDTO>> GetGeneros()
        {
            return await context.Generos.Select(x => new GeneroDTO()
            {
                Descripcion = x.DescripcionGn,
                Id = x.IdGn
            }).ToListAsync();
        }
        public async Task<bool> SaveGenero(GeneroDTO genero)
        {
            context.Add(new Generos()
            {
                DescripcionGn = genero.Descripcion
            });
            return await context.SaveChangesAsync() > 0;
        }

        public async Task<List<CapituloDTO>> GetCapitulos()
        {
            return await context.CapituloSerie.Select(x => new CapituloDTO()
            {
                IdSr = x.IdSr,
                IdCp = x.IdCp,
                NombreCp = x.NombreCp,
                DescripcionCp = x.DescripcionCp,
                DuracionCp = x.DuracionCp,
                UrlCp = x.UrlCp,
            }).ToListAsync();
        }

        public async Task<List<PeliculaDTO>> SearchPelicula(string title) 
        {
            try 
            {
                var peliculas = await context.Peliculas.Where(x => x.TituloPl.StartsWith(title))
                    .Select(x => new PeliculaDTO 
                    {
                        Id = x.IdPl,
                        Titulo = x.TituloPl,
                        Descripcion = x.DescripcionPl,
                        Duracion = x.DuracionPl,
                        Elenco = x.ElencoPl, 
                        Url = x.UrlPl,
                        Portada = x.PortadaPl,
                        Generos = x.GenerosPeliculas.Select(x => new GeneroDTO()
                        {
                            Descripcion = x.IdGnNavigation.DescripcionGn,
                            Id = x.IdGn
                        }).ToList(),
                    }).ToListAsync();

                return peliculas;
                
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        public async Task<List<SerieDTO>> SearchSerie(string title)
        {
            try
            {
                var series = await context.Series.Where(x => x.NombreSr.StartsWith(title))
                    .Select(x => new SerieDTO 
                    {
                        Id = x.IdSr,
                        Nombre = x.NombreSr,
                        Descripcion = x.DescripcionSr,
                        CantidadCapitulos = x.CantCapitulosSr,
                        Url = x.UrlSr, 
                        Portada = x.PortadaSr,
                        Capitulos = x.CapituloSerie.Select(capituloEntity => new CapituloDTO
                        {
                            IdSr = capituloEntity.IdSr,
                            IdCp = capituloEntity.IdCp,
                            NombreCp = capituloEntity.NombreCp,
                            DescripcionCp = capituloEntity.DescripcionCp,
                            DuracionCp = capituloEntity.DuracionCp,
                            Temporada = int.Parse(capituloEntity.TemporadaCp),
                            UrlCp = capituloEntity.UrlCp
                        }).ToList(),
                    }).ToListAsync();

                return series;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }
    }
}
