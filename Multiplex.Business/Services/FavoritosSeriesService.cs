using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class FavoritosSeriesService : IFavoritosSeriesService
    {
        private readonly MultiplexContext context;

        public FavoritosSeriesService(MultiplexContext context)
        {
            this.context = context;
        }

        public async Task<string> CreateFavoritosSeries(FavoritosSeriesDTO favoritosSeries)
        {
            if (context.FavoritosSeries.Any(h => h.IdUsr == favoritosSeries.IdUsr && h.IdSr == favoritosSeries.IdSerie))
            {
                return "El favorito ya se encuentra registrado";
            }

            try
            {
                var favoritosSeriesEntity = new FavoritosSeries
                {
                    IdUsr = favoritosSeries.IdUsr,
                    IdSr = favoritosSeries.IdSerie
                };

                context.FavoritosSeries.Add(favoritosSeriesEntity);
                await context.SaveChangesAsync();

                return "Favorito registrado";
            }
            catch (Exception)
            {
                return "Error al registrar el favorito";
            }
        }

        public async Task<bool> DeleteFavoritosSeries(FavoritosSeriesDTO favoritosSeries)
        {
            try
            {
                var favoritosSeriesEntity = new FavoritosSeries
                {
                    IdUsr = favoritosSeries.IdUsr,
                    IdSr = favoritosSeries.IdSerie
                };

                context.FavoritosSeries.Remove(favoritosSeriesEntity);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task<IEnumerable<SerieDTO>> GetFavoritosSeries(int idUsr)
        {
            var favoritosSeries = await context.FavoritosSeries
                .Where(fs => fs.IdUsr == idUsr)
                .Select(fs => new SerieDTO
                {
                    Id = fs.IdSr,
                    Nombre = fs.IdSrNavigation.NombreSr,
                    Portada = fs.IdSrNavigation.PortadaSr,
                    Descripcion = fs.IdSrNavigation.DescripcionSr,
                    Url = fs.IdSrNavigation.UrlSr,
                    CantidadCapitulos = fs.IdSrNavigation.CantCapitulosSr,
                    Capitulos = fs.IdSrNavigation.CapituloSerie.Select(c => new CapituloDTO
                    {
                        IdCp = c.IdCp,
                        NombreCp = c.NombreCp,
                        DescripcionCp = c.DescripcionCp,
                        DuracionCp = c.DuracionCp,
                        UrlCp = c.UrlCp,
                        Portada = c.PortadaCp,
                        IdSr = c.IdSr,
                        Temporada = int.Parse(c.TemporadaCp)
                    }).ToList()
                })
                .ToListAsync();

            return favoritosSeries;
        }
    }
}
