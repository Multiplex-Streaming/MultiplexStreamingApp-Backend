using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class MetricasService : IMetricasService
    {
        private readonly MultiplexContext context;
        private readonly ILogger logger;

        public MetricasService(MultiplexContext context, ILogger<UsuariosService> logger)
        {
            this.context = context;
            this.logger = logger;
        }

        //top de las 10 peliculas mas vistas
        public async Task<IEnumerable<TopPeliculasDTO>> GetTopPeliculas()
        {
            try
            {
                var peliculasMasVistas = await context.HistorialPeliculas
                    .GroupBy(h => h.IdPl)
                    .Select(group => new
                    {
                        PeliculaId = group.Key,
                        CantidadVisualizaciones = group.Count()
                    })
                    .OrderByDescending(x => x.CantidadVisualizaciones)
                    .Take(10)
                    .ToListAsync();

                var TopPeliculasDTO = new List<TopPeliculasDTO>();

                foreach (var peliculaInfo in peliculasMasVistas)
                {
                    var pelicula = await context.Peliculas.FindAsync(peliculaInfo.PeliculaId);

                    if (pelicula != null)
                    {
                        var peliculaDTO = new TopPeliculasDTO
                        {
                            Id = pelicula.IdPl,
                            Titulo = pelicula.TituloPl,
                            CantidadVisualizaciones = peliculaInfo.CantidadVisualizaciones
                        };
                        TopPeliculasDTO.Add(peliculaDTO);
                    }
                }

                return TopPeliculasDTO;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener el top de películas");
                throw;
            }
        }

        public async Task<IEnumerable<TopSeriesDTO>> GetTopSeries()
        {
            try
            {
                var seriesMasVistas = await context.HistorialSeries
                    .GroupBy(h => h.IdSr)
                    .Select(group => new
                    {
                        SerieId = group.Key,
                        CantidadVisualizaciones = group.Count()
                    })
                    .OrderByDescending(x => x.CantidadVisualizaciones)
                    .Take(10)
                    .ToListAsync();

                var seriesDTO = new List<TopSeriesDTO>();

                foreach (var serieInfo in seriesMasVistas)
                {
                    var serie = await context.Series.FindAsync(serieInfo.SerieId);

                    if (serie != null)
                    {
                        var serieDTO = new TopSeriesDTO
                        {
                            Id = serie.IdSr,
                            Titulo = serie.NombreSr,
                            CantidadVisualizaciones = serieInfo.CantidadVisualizaciones
                        };
                        seriesDTO.Add(serieDTO);
                    }
                }

                return seriesDTO;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener el top de series");
                throw;
            }
        }

        //generos mas vistos - peliculas
        public async Task<IEnumerable<(string Genero, int TotalVisualizaciones)>> GetGenerosMasVistosPeliculas()
        {
            var generosMasVistos = await context.HistorialPeliculas
                .SelectMany(h => h.IdPlNavigation.GenerosPeliculas.Select(g => g.IdGn))
                .GroupBy(g => g)
                .Select(group => new
                {
                    Genero = group.Key,
                    CantidadVisualizaciones = group.Count()
                })
                .OrderByDescending(x => x.CantidadVisualizaciones)
                .Take(5)
                .ToListAsync();

            var generosConTotalVisualizaciones = new List<(string Genero, int TotalVisualizaciones)>();

            foreach (var generoInfo in generosMasVistos)
            {
                var nombreGenero = await context.Generos
                    .Where(g => g.IdGn == generoInfo.Genero)
                    .Select(g => g.DescripcionGn)
                    .FirstOrDefaultAsync();

                if (!string.IsNullOrEmpty(nombreGenero))
                {
                    generosConTotalVisualizaciones.Add((nombreGenero, generoInfo.CantidadVisualizaciones));
                }
            }

            return generosConTotalVisualizaciones;
        }

        //get generos mas vistos - series
        public async Task<IEnumerable<(string Genero, int TotalVisualizaciones)>> GetGenerosMasVistosSeries()
        {
            var generosMasVistos = await context.HistorialSeries
                .SelectMany(h => h.IdSrNavigation.GenerosSeries.Select(g => g.IdGn))
                .GroupBy(g => g)
                .Select(group => new
                {
                    Genero = group.Key,
                    CantidadVisualizaciones = group.Count()
                })
                .OrderByDescending(x => x.CantidadVisualizaciones)
                .Take(5)
                .ToListAsync();

            var generosConTotalVisualizaciones = new List<(string Genero, int TotalVisualizaciones)>();

            foreach (var generoInfo in generosMasVistos)
            {
                var nombreGenero = await context.Generos
                    .Where(g => g.IdGn == generoInfo.Genero)
                    .Select(g => g.DescripcionGn)
                    .FirstOrDefaultAsync();

                if (!string.IsNullOrEmpty(nombreGenero))
                {
                    generosConTotalVisualizaciones.Add((nombreGenero, generoInfo.CantidadVisualizaciones));
                }
            }

            return generosConTotalVisualizaciones;
        }

        //usuarios que mas vieron peliculas

        public async Task<IEnumerable<(string Usuario, int TotalVisualizaciones)>> GetUsuariosMasVieronPeliculas()
        {
            var usuariosMasVieron = await context.HistorialPeliculas
                .GroupBy(h => h.IdUsr)
                .Select(group => new
                {
                    Usuario = group.Key,
                    CantidadVisualizaciones = group.Count()
                })
                .OrderByDescending(x => x.CantidadVisualizaciones)
                .Take(5)
                .ToListAsync();

            var usuariosConTotalVisualizaciones = new List<(string Usuario, int TotalVisualizaciones)>();

            foreach (var usuarioInfo in usuariosMasVieron)
            {
                var nombreUsuario = await context.Usuarios
                    .Where(u => u.IdUsr == usuarioInfo.Usuario)
                    .Select(u => u.CorreoUsr)
                    .FirstOrDefaultAsync();

                if (!string.IsNullOrEmpty(nombreUsuario))
                {
                    usuariosConTotalVisualizaciones.Add((nombreUsuario, usuarioInfo.CantidadVisualizaciones));
                }
            }

            return usuariosConTotalVisualizaciones;
        }

        //usuarios que mas vieron series
        public async Task<IEnumerable<(string Usuario, int TotalVisualizaciones)>> GetUsuariosMasVieronSeries()
        {
            var usuariosMasVieron = await context.HistorialSeries
                .GroupBy(h => h.IdUsr)
                .Select(group => new
                {
                    Usuario = group.Key,
                    CantidadVisualizaciones = group.Count()
                })
                .OrderByDescending(x => x.CantidadVisualizaciones)
                .Take(5)
                .ToListAsync();

            var usuariosConTotalVisualizaciones = new List<(string Usuario, int TotalVisualizaciones)>();

            foreach (var usuarioInfo in usuariosMasVieron)
            {
                var nombreUsuario = await context.Usuarios
                    .Where(u => u.IdUsr == usuarioInfo.Usuario)
                    .Select(u => u.CorreoUsr)
                    .FirstOrDefaultAsync();

                if (!string.IsNullOrEmpty(nombreUsuario))
                {
                    usuariosConTotalVisualizaciones.Add((nombreUsuario, usuarioInfo.CantidadVisualizaciones));
                }
            }

            return usuariosConTotalVisualizaciones;
        }

        //TODO: Análisis de abandono: Puedes analizar cuántos usuarios comienzan a ver una película o serie pero la abandonan antes de terminar.

    }
}
