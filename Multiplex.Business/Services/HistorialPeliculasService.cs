using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class HistorialPeliculasService : IHistorialPeliculasService
    {
        private readonly MultiplexContext context;

        public HistorialPeliculasService(MultiplexContext context)
        {
            this.context = context;
        }
        
        public async Task<string> CreateHistorialPelicula(HistorialPeliculasDTO historialPelicula)
        {
            if (await context.HistorialPeliculas.AnyAsync(h => h.IdPl == historialPelicula.IdPl && h.IdUsr == historialPelicula.IdUsr))
            {
                return "El historial de la película ya está registrado para este usuario.";
            }

            context.Add(new HistorialPeliculas()
            {
                IdPl = historialPelicula.IdPl,
                IdUsr = historialPelicula.IdUsr
            });

            if (await context.SaveChangesAsync() > 0)
            {
                return "Historial de película registrado con éxito.";
            }
            else
            {
                return "No se pudo registrar el historial de película.";
            }
        }

        //obtener el historial de ese usuario
        public async Task<IEnumerable<PeliculaDTO>> GetHistorialPeliculas(int idUsr)
        {
            var historialPeliculas = await context.HistorialPeliculas
                .Where(h => h.IdUsr == idUsr)
                .Select(h => new PeliculaDTO
                {
                    Id = h.IdPl,
                    Titulo = h.IdPlNavigation.TituloPl,
                    Portada = h.IdPlNavigation.PortadaPl,
                    Descripcion = h.IdPlNavigation.DescripcionPl,
                    Duracion = h.IdPlNavigation.DuracionPl,
                    Url = h.IdPlNavigation.UrlPl,
                })
                .ToListAsync();

            return historialPeliculas;
        }

        public async Task<bool> DeleteHistorialPelicula(HistorialPeliculasDTO historialPelicula)
        {
            var existingHistorialPelicula = await context.HistorialPeliculas.FindAsync(historialPelicula.IdPl);
            if (existingHistorialPelicula == null)
            {
                return false;
            }

            context.HistorialPeliculas.Remove(existingHistorialPelicula);

            return await context.SaveChangesAsync() > 0;
        }

        public async Task<IEnumerable<PeliculaDTO>> GetRecomendaciones(int idUsr)
        {
            // Obtén el historial de películas del usuario
            var historialUsuario = await context.HistorialPeliculas
                .Where(h => h.IdUsr == idUsr)
                .Select(h => h.IdPl)
                .ToListAsync();

            // Encuentra otros usuarios que hayan visto las mismas películas
            var usuariosSimilares = await context.HistorialPeliculas
                .Where(h => h.IdUsr != idUsr && historialUsuario.Contains(h.IdPl))
                .Select(h => h.IdUsr)
                .Distinct()
                .ToListAsync();

            // Recomendar películas vistas por usuarios similares pero no vistas por el usuario actual
            var recomendaciones = await context.HistorialPeliculas
                .Where(h => usuariosSimilares.Contains(h.IdUsr) && !historialUsuario.Contains(h.IdPl))
                .Select(h => new PeliculaDTO
                {
                    Id = h.IdPl,
                    Titulo = h.IdPlNavigation.TituloPl,
                    Portada = h.IdPlNavigation.PortadaPl,
                    Descripcion = h.IdPlNavigation.DescripcionPl,
                    Duracion = h.IdPlNavigation.DuracionPl,
                    Url = h.IdPlNavigation.UrlPl
                })
                .ToListAsync();

            return recomendaciones;
        }
    }
}
