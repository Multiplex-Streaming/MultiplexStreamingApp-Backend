using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class HistorialPeliculasService : IHistorialPeliculasService
    {
        private readonly MultiplexContext context;

        public HistorialPeliculasService(MultiplexContext context)
        {
            this.context = context;
        }

        public async Task<bool> CreateHistorialPelicula(HistorialPeliculasDTO historialPelicula)
        {
            context.Add(new HistorialPeliculas()
            {
                IdPl = historialPelicula.IdPl,
                IdUsr = historialPelicula.IdUsr
            });
            return await context.SaveChangesAsync() > 0;
        }

        //obtener el historial de ese usuario
        public async Task<IEnumerable<HistorialPeliculasDTO>> GetHistorialPeliculas(int idUsr)
        {
            var historialPeliculas = await context.HistorialPeliculas
                .Where(h => h.IdUsr == idUsr)
                .Select(h => new HistorialPeliculasDTO
                {
                    IdPl = h.IdPl,
                    IdUsr = h.IdUsr
                })
                .ToListAsync();

            return historialPeliculas;
        }

        public async Task<HistorialPeliculasDTO> UpdateHistorialPelicula(HistorialPeliculasDTO historialPelicula)
        {
            var existingHistorialPelicula = await context.HistorialPeliculas.FindAsync(historialPelicula.IdPl);
            if (existingHistorialPelicula == null)
            {
                return null; // El registro no se encontró
            }

            // Actualizar propiedades según sea necesario
            existingHistorialPelicula.IdUsr = historialPelicula.IdUsr;

            await context.SaveChangesAsync();

            return historialPelicula;
        }

    }
}
