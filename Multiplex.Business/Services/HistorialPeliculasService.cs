using Microsoft.EntityFrameworkCore;
using Multiplex.Business.DTOs;
using Multiplex.Business.Interfaces;
using Multiplex.Domain.Contexts.AutoGenerated;
using Multiplex.Domain.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiplex.Business.Services
{
    public class HistorialPeliculasService : IHistorialPeliculasService
    {
        private readonly MultiplexContext context;

        public HistorialPeliculasService(MultiplexContext context)
        {
            this.context = context;
        }

        public async Task<string> CreateHistorialPelicula(int userId, int peliculaId)
        {

            try 
            {
                if (!await context.HistorialPeliculas.AnyAsync(h => h.IdPl == peliculaId && h.IdUsr == userId))
                {
                    context.Add(new HistorialPeliculas()
                    {
                        IdPl = peliculaId,
                        IdUsr = userId
                    });

                    if (await context.SaveChangesAsync() > 0)
                    {
                        return "Historial de película registrado con éxito.";
                    }
                    else
                    {
                        return "No se pudo registrar el historial de película.";
                    }
                }

                return string.Empty;
                
            }
            catch(Exception ex) 
            {
                throw new Exception(ex.ToString());
            }
            
        }

        //obtener el historial de ese usuario
        public async Task<IEnumerable<PeliculaDTO>> GetHistorialPeliculas(int idUsr)
        {
            var historialPeliculas = await context.HistorialPeliculas
                .Where(h => h.IdUsr == idUsr)
                .Select(h => new PeliculaDTO
                {
                    Id = h.IdPl,
                    Titulo = h.IdPlNavigation.TituloPl,
                    Portada = h.IdPlNavigation.PortadaPl,
                    Descripcion = h.IdPlNavigation.DescripcionPl,
                    Duracion = h.IdPlNavigation.DuracionPl,
                    Url = h.IdPlNavigation.UrlPl,
                })
                .ToListAsync();

            return historialPeliculas;
        }

        public async Task<bool> DeleteHistorialPelicula(int peliculaId, int idUsr)
        {
            try 
            {
                var existingHistorialPelicula = await context.HistorialPeliculas.FindAsync(peliculaId, idUsr);
                if (existingHistorialPelicula == null)
                {
                    return false;
                }

                context.HistorialPeliculas.Remove(existingHistorialPelicula);

                return await context.SaveChangesAsync() > 0;
            }catch (Exception ex) 
            {
                throw new Exception(ex.ToString());
            }
            
        }

        public async Task<IEnumerable<PeliculaDTO>> GetRecomendaciones(int idUsr)
        {
            // Obtén el historial de películas del usuario
            var historialUsuario = await context.HistorialPeliculas
                .Where(h => h.IdUsr == idUsr)
                .Select(h => h.IdPl)
                .ToListAsync();

            // Encuentra otros usuarios que hayan visto las mismas películas
            var usuariosSimilares = await context.HistorialPeliculas
                .Where(h => h.IdUsr != idUsr && historialUsuario.Contains(h.IdPl))
                .Select(h => h.IdUsr)
                .Distinct()
                .ToListAsync();

            // Recomendar películas vistas por usuarios similares pero no vistas por el usuario actual
            var recomendaciones = await context.HistorialPeliculas
                .Where(h => usuariosSimilares.Contains(h.IdUsr) && !historialUsuario.Contains(h.IdPl))
                .Select(h => new PeliculaDTO
                {
                    Id = h.IdPl,
                    Titulo = h.IdPlNavigation.TituloPl,
                    Portada = h.IdPlNavigation.PortadaPl,
                    Descripcion = h.IdPlNavigation.DescripcionPl,
                    Duracion = h.IdPlNavigation.DuracionPl,
                    Url = h.IdPlNavigation.UrlPl
                })
                .ToListAsync();

            return recomendaciones;
        }

        public async Task<bool> UpdateHistorial(int idUser, int idPl, int minutos, int segundos)
        {
            var historial = await context.HistorialPeliculas.Where(x => x.IdPl == idPl && x.IdUsr == idUser)
                .FirstOrDefaultAsync();
            historial.Minutos =  Convert.ToInt16(minutos);
            historial.Segundos = Convert.ToInt16(segundos);
            context.HistorialPeliculas.Update(historial);
            return await context.SaveChangesAsync() > 0;
        }

        public async Task<HistorialPeliculasDTO> GetHistorialPelicula(int idUsr, int idPl)
        {
            return await context.HistorialPeliculas.Where(x => x.IdPl == idPl && x.IdUsr == idUsr)
                .Select(x => new HistorialPeliculasDTO()
                {
                    IdPl = x.IdPl,
                    IdUsr = x.IdUsr,
                    Minutos = x.Minutos ?? 0,
                    Segundos = x.Segundos ?? 0
                })
                .FirstOrDefaultAsync();
        }
    }
}
